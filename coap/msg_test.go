package coap

import (
	//"fmt"
	//oldcoap "github.com/lobaro/gocoap"
	"testing"
)

/*
func BenchmarkMsgParse(b *testing.B) {
	rawtest := []byte{0x40, 0x03, 0xe9, 0x46, 0xbb, 0x2e, 0x77,
		0x65, 0x6c, 0x6c, 0x2d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x04, 0x63, 0x6f,
		0x72, 0x65, 0xff, 0x69, 0x61, 0x6d, 0x20, 0x50, 0x61, 0x79, 0x6c, 0x6f,
		0x61, 0x44, 0x21}

	for n := 0; n < b.N; n++ {
		msg := oldcoap.Message{}
		msg.UnmarshalBinary(rawtest)
	}
}
*/

func BenchmarkMsgParse2(b *testing.B) {
	rawtest := []byte{0x40, 0x03, 0xe9, 0x46, 0xbb, 0x2e, 0x77,
		0x65, 0x6c, 0x6c, 0x2d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x04, 0x63, 0x6f,
		0x72, 0x65, 0xff, 0x69, 0x61, 0x6d, 0x20, 0x50, 0x61, 0x79, 0x6c, 0x6f,
		0x61, 0x44, 0x21}

	for n := 0; n < b.N; n++ {
		msg := Message{}
		msg.Parse(rawtest)
	}
}

func TestMsgParseAndPack(t *testing.T) {
	//Put Msg to .well-known/core path with payload "PayloaD!"

	rawtest := []byte{0x40, 0x03, 0xe9, 0x46, 0xbb, 0x2e, 0x77,
		0x65, 0x6c, 0x6c, 0x2d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x04, 0x63, 0x6f,
		0x72, 0x65, 0xff, 0x69, 0x61, 0x6d, 0x20, 0x50, 0x61, 0x79, 0x6c, 0x6f,
		0x61, 0x44, 0x21}

	msg := Message{}
	msg.Parse(rawtest)

	rawafter, _ := msg.Bytes()

	for i, v := range rawafter {
		if rawtest[i] != v {
			t.Errorf("Expected packed byte 0x%x, got 0x%x\r\n", rawtest[i], v)
		}
		t.Logf("%c [0x%x] same? %t\r\n", v, v, rawtest[i] == v)
	}
}
